AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Name:
    Type: String

  Bucket:
    Type: String

Outputs:

  LambdaName:
    Value: !Ref Lambda

Resources:

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-dlq"
      MessageRetentionPeriod: 1209600

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Name}"
      RetentionInDays: 30

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Name}-access"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            AWS: !GetAtt LambdaRole.Arn
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub "arn:aws:s3:::${Bucket}"
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${Bucket}/*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref Name
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt DeadLetterQueue.Arn
          - Effect: Allow
            Action: iam:GetRolePolicy
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Name}-access"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Name
      Code: src/
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          CONFIG: !Sub |-
            {
              "credentials": {
                "role_arn": "${AccessRole.Arn}",
                "duration_seconds": 3600
              },
              "policy": {
                "role_name": "${AccessRole}",
                "policy_name": "policy"
              }
            }
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
