AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  Name:
    Type: String

  LogLevel:
    Description: Application logging level
    Type: String
    Default: INFO
    AllowedValues:
    - CRITICAL
    - ERROR
    - WARNING
    - INFO
    - DEBUG

  UsersTable:
    Type: String

  BundleObjectsTable:
    Type: String

  ObjectsTable:
    Type: String

  Hostname:
    Type: String

  SenderEmailAddress:
    Type: String
    Default: "uso@asf.alaska.edu"

  SenderDescription:
    Type: String
    Default: "ASF User Services"

  AcknowledgementEmailIntervalInMinutes:
    Type: Number
    Default: 720

  RetentionDays:
    Type: Number
    Default: 7

Outputs:

  EmailQueueName:
    Value: !GetAtt EmailQueue.QueueName

Resources:

  LambdaDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-lambda-dlq"
      MessageRetentionPeriod: 1209600

  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-email"
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EmailDeadLetterQueue.Arn
        maxReceiveCount: 3

  EmailDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-email-dlq"
      MessageRetentionPeriod: 1209600

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Name}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref Name
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt LambdaDeadLetterQueue.Arn
          - Effect: Allow
            Action:
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            Resource: !GetAtt EmailQueue.Arn
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTable}"
          - Effect: Allow
            Action: dynamodb:Query
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BundleObjectsTable}"
          - Effect: Allow
            Action: dynamodb:GetItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ObjectsTable}"
          - Effect: Allow
            Action: ses:SendEmail
            Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${SenderEmailAddress}"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Name
      Code: src/
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDeadLetterQueue.Arn
      Environment:
        Variables:
          CONFIG: !Sub |-
            {
              "log_level": "${LogLevel}",
              "notifications": {
                "email_queue_url": "${EmailQueue}",
                "wait_time_in_seconds": 10,
                "max_messages_per_receive": 10,
                "buffer_time_in_millis": 20000,
                "email_content": {
                  "users_table": "${UsersTable}",
                  "bundle_objects_table": "${BundleObjectsTable}",
                  "objects_table": "${ObjectsTable}",
                  "hostname": "${Hostname}",
                  "retention_days": ${RetentionDays},
                  "message_interval_in_minutes": ${AcknowledgementEmailIntervalInMinutes},
                  "sender": {
                    "from_description": "${SenderDescription}",
                    "from_email": "${SenderEmailAddress}"
                  }
                }
              }
            }
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python2.7
      Timeout: 80

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref Name
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
      - Arn: !GetAtt Lambda.Arn
        Id: lambda

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
