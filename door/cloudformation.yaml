AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Name:
    Type: String

  CloudFrontDomainName:
    Type: String

  CloudFrontKeyPairId:
    Type: String

  PrivateKeySecretName:
    Type: String

  PrivateBucket:
    Type: String

  CertificateArn:
    Type: String

  DomainName:
    Type: String

  AuthUrl:
    Type: String

  JwtCookieName:
    Type: String

  JwtPublicKey:
    Type: String

Resources:

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref Name
      ProtocolType: HTTP
      Target: !GetAtt Lambda.Arn
      CredentialsArn: !GetAtt ApiRole.Arn

  ApiOverrides:
    Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
    Properties:
      ApiId: !Ref Api
      Stage:
        AccessLogSettings:
          DestinationArn: !GetAtt ApiLogGroup.Arn
          Format: '{"sourceIp":"$context.identity.sourceIp","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency","requestTime":"$context.requestTime","protocol":"$context.protocol","userAgent":"$context.identity.userAgent","requestId":"$context.requestId"}'

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180

  CustomDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref DomainName
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref CustomDomainName
      Stage: $default

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Lambda.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${PrivateKeySecretName}*"
            - Effect: Allow
              Action: s3:ListBucket
              Resource: !Sub "arn:aws:s3:::${PrivateBucket}"
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub "arn:aws:s3:::${PrivateBucket}/*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          CloudFrontDomainName: !Ref CloudFrontDomainName
          CloudFrontKeyPairId: !Ref CloudFrontKeyPairId
          PrivateKeySecretName: !Ref PrivateKeySecretName
          PrivateBucket: !Ref PrivateBucket
          AuthUrl: !Ref AuthUrl
          JwtCookieName: !Ref JwtCookieName
          JwtPublicKey: !Ref JwtPublicKey
      Code: src/
      Handler: door.lambda_handler.handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
